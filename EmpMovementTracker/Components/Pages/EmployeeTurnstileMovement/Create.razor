@page "/employeeTurnstileMovement/create"

@using EmpMovementTracker.Components.Shared
@using EmpMovementTracker.DTOs
@using EmpMovementTracker.DTOs.EmployeeTurnstileMovement
@using EmpMovementTracker.Services
@using Microsoft.AspNetCore.WebUtilities

@inject EmployeeMovementService EmployeeMovementService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager Navigation

<PageTitle>Add Employee Turnstile Movement</PageTitle>

<!-- Page Title-->
<h2 class="mb-6 fw-bold">Add Employee Turnstile Movement</h2>

<MudGrid>
    <!-- Add Employee Turnstile Movement Form -->
    <MudItem xs="12">
        <MudCard Elevation="25">
            <EditForm FormName="EmployeeMovementAddForm" Model="@createEmployeeMovement" OnValidSubmit="CreateEmployeeTurnstileMovement">
                <!-- Employee Information Section -->
                <MudPaper Class="pa-4" Elevation="1">
                    <MudText Typo="Typo.h6" Class="mb-2">Employee Information</MudText>
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudInputLabel>Name *</MudInputLabel>
                            <MudTextField @bind-Value="createEmployeeMovement.Name" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudInputLabel>Employee ID *</MudInputLabel>
                            <MudTextField @bind-Value="createEmployeeMovement.PersonId" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" />
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudInputLabel>Work Cell *</MudInputLabel>
                            <MudTextField @bind-Value="createEmployeeMovement.WorkCell" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" />
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudInputLabel>Shift Group ID *</MudInputLabel>
                            <MudSelect T="string" @bind-Value="createEmployeeMovement.ShiftGroupId" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true">
                                @foreach (var item in filterOptions.ShiftGroupIds)
                                {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudInputLabel>Shift Group *</MudInputLabel>
                            <MudNumericField @bind-Value="createEmployeeMovement.ShiftGroup" Variant="Variant.Outlined" Margin="Margin.Dense" Typo="Typo.body2" Min="0" For="@(() => createEmployeeMovement.ShiftGroup)" />
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudInputLabel>Department Code *</MudInputLabel>
                            <MudSelect T="string" @bind-Value="createEmployeeMovement.DepartmentCode" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true">
                                @foreach (var item in filterOptions.DepartmentCodes)
                                {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudInputLabel>Department *</MudInputLabel>
                            <MudSelect T="string" @bind-Value="createEmployeeMovement.Department" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true">
                                @foreach (var item in filterOptions.Departments)
                                {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudInputLabel>Building *</MudInputLabel>
                            <MudSelect T="string" @bind-Value="createEmployeeMovement.Building" Variant="Variant.Outlined" Margin="Margin.Dense"  Required="true">
                                @foreach (var item in filterOptions.Buildings)
                                {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                    <!-- Turnstile Information Section -->
                    <MudText Typo="Typo.h6" Class="mb-2">Turnstile Information</MudText>
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudInputLabel>Date *</MudInputLabel>
                            <MudDatePicker @bind-Date="createEmployeeMovement.Date" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudInputLabel>Time *</MudInputLabel>
                            <MudTimePicker @bind-Time="createEmployeeMovement.Time" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudInputLabel>Building ID *</MudInputLabel>
                            <MudSelect T="string" @bind-Value="createEmployeeMovement.BuildingId" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true">
                                @foreach (var item in filterOptions.BuildingIds)
                                {
                                    <MudSelectItem Value="@item">@item</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudInputLabel>Station *</MudInputLabel>
                            <MudTextField @bind-Value="createEmployeeMovement.Station" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" />
                        </MudItem>
                    </MudGrid>
                    <!-- Action Buttons -->
                    <MudCardActions Class="justify-content-end gap-2">
                        <!-- Cancel Button -->
                        <MudButton Color="Color.Primary" title="Cancel" OnClick="() => CancelEditEmployeeTurnstileMovement()">
                            Cancel
                        </MudButton>
                        <!-- Submit Button -->
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" title="Submit">
                            Submit
                        </MudButton>
                    </MudCardActions>
                </MudPaper>
            </EditForm>
        </MudCard>
    </MudItem>
</MudGrid>

@code {

    // Variable declaration & initialization
    // private bool isFormLoading = true;
    private EmployeeMovementFilterSelection filterOptions = new();
    private EmployeeMovementCreate createEmployeeMovement = new();
    private MudForm form = null!;

    // Action on component initialization
    protected override async Task OnInitializedAsync()
    {
        try
        {
            filterOptions = await EmployeeMovementService.GetInitializedSelections();
        }
        catch (Exception)
        {
            Snackbar.Add("An error occurred while loading the page data. Please refresh the page or try again later.", Severity.Error);
        }

        // Load data depending on filter
        //await LoadFormData();
    }

    // Add the employee turnstile movement
    private async Task CreateEmployeeTurnstileMovement()
    {

        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { x => x.ContentText, "Are you sure you want to submit?" },
            { x => x.SubmitBtnText, "Confirm" },
        };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Submit Confirmation. The employee has been added.", parameters, options);
        var dialogResult = await dialog.Result;

        if (!dialogResult.Canceled)
        {
            try
            {
                await CreateEmployeeTurnstileMovement();
            }
            catch (Exception ex)
            {
                Snackbar.Add("An unexpected error occurred while add employee turnstile movement data. Please try again.", Severity.Error);
                // var innerMessage = ex.InnerException?.Message ?? ex.Message;
                // Snackbar.Add($"An unexpected error occurred: {innerMessage}", Severity.Error);
            }
        }
    }

    // Cancel editing the employee turnstile movement
    private async Task CancelEditEmployeeTurnstileMovement()
    {
    
        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { x => x.ContentText, "Are you sure you want to cancel?" },
            { x => x.SubmitBtnText, "Yes" },
        };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Cancel Confirmation", parameters, options);
        var dialogResult = await dialog.Result;

        if (!dialogResult.Canceled)
        {
            createEmployeeMovement = new EmployeeMovementCreate(); // Reset the form
            StateHasChanged(); // Refresh the UI
        }

    }
}