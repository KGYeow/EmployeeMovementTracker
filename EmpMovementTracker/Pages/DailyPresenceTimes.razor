@page "/dailyPresenceTimes"

@using EmpMovementTracker.Components.Shared
@using EmpMovementTracker.Constants
@using EmpMovementTracker.DTOs.EmployeeTurnstileMovement
@using EmpMovementTracker.Models
@using EmpMovementTracker.Services
@using Microsoft.AspNetCore.WebUtilities;

@inject EmployeeMovementService EmployeeMovementService
@inject EmployeeTimeTrackingService EmployeeTimeTrackingService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<PageTitle>Daily Presence Times - @AppConstant.AppTitle</PageTitle>

<!-- Page Header-->
<PageHeader Title="Employee Daily Presence Times" />

<MudGrid>
    <!-- Filter Section -->
    <MudItem xs="12">
        <MudCard Elevation="25">
            <MudCardContent>
                <EditForm FormName="EmployeeTimeTrackingFilterForm" Model="@filter" OnValidSubmit="ApplyFilter">
                    <MudStack Row Wrap="Wrap.Wrap">
                        <MudItem Class="flex-grow-1">
                            <!-- Employee Name Filter -->
                            <MudTextField @bind-Value="filter.Name" Variant="Variant.Text" Margin="Margin.Dense" Typo="Typo.body2" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.Search" Placeholder="Search by employee name" />
                        </MudItem>
                        <div class="vr"></div>
                        <MudItem Style="width: 120px">
                            <!-- Date Filter -->
                            <MudDatePicker @bind-Date="filter.Date" Variant="Variant.Text" Margin="Margin.Dense" ShowToolbar="false" IconSize="Size.Small" Style="font-size: 14px" />
                        </MudItem>
                        <div class="vr"></div>
                        <MudItem Style="width: 180px">
                            <!-- Work Cell Filter -->
                            <MudSelect @bind-Value="filter.WorkCell" Variant="Variant.Text" Margin="Margin.Dense" Typo="Typo.body2" Placeholder="Work cell" Dense>
                                @foreach (var workCell in filterOptions.WorkCells)
                                {
                                    <MudSelectItem Value="workCell">@workCell</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <div class="vr"></div>
                        <MudItem Style="width: 180px">
                            <!-- Department Filter -->
                            <MudSelect @bind-Value="filter.Department" Variant="Variant.Text" Margin="Margin.Dense" Typo="Typo.body2" Placeholder="Department" Dense>
                                @foreach (var department in filterOptions.Departments)
                                {
                                    <MudSelectItem Value="department">@department</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <div class="vr"></div>
                        <MudStack Row Spacing="2">
                            <!-- Filter Button -->
                            <MudIconButton ButtonType="ButtonType.Submit" Icon="@Icons.Material.Rounded.FilterAlt" Size="Size.Small" title="Filter" />
                            <!-- Reset Button -->
                            <MudIconButton Icon="@Icons.Material.Rounded.Refresh" Size="Size.Small" title="Reset Filter" OnClick="ResetFilter" />
                        </MudStack>
                        <div class="vr"></div>
                        <MudStack Row>
                            <!-- Add Employee Turnstile Movement Button -->
                            <MudButton IconClass="me-1" StartIcon="@Icons.Material.Rounded.Add" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" DropShadow="false" Href="/employeeTurnstileMovement/create" title="Add Employee Turnstile Movement">
                                Insert
                            </MudButton>
                        </MudStack>
                    </MudStack>
                </EditForm>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <!-- List of Present Employee Movement -->
    <MudItem xs="12">
        <MudCard Elevation="25">
            <MudCardContent>
                <MudDataGrid
                    T="EmployeeTimeTracking"
                    Items="presentEmployees"
                    Loading="@isTableLoading"
                    SortMode="SortMode.Single"
                    ColumnResizeMode="ResizeMode.Container"
                    Elevation="0"
                    Hover
                    Dense
                >
                    <LoadingContent>
                        <MudText>Loading data...</MudText>
                    </LoadingContent>
                    <NoRecordsContent>
                        <MudText>No data available</MudText>
                    </NoRecordsContent>
                    <ColGroup>
                        <col style="min-width: 180px" />
                        <col style="min-width: 250px" />
                        <col style="min-width: 130px" />
                        <col style="min-width: 170px" />
                        <col style="min-width: 170px" />
                        <col style="min-width: 150px" />
                        <col style="min-width: 180px" />
                        <col style="min-width: 210px" />
                        <col style="min-width: 170px" />
                    </ColGroup>
                    <Columns>
                        <PropertyColumn Property="x => x.PersonId" Title="Employee ID" />
                        <PropertyColumn Property="x => x.Name" Title="Employee Name" />
                        <PropertyColumn Property="@(x => x.Date.ToString("dd MMM yyyy"))" />
                        <PropertyColumn Property="x => x.InitialTime" Title="Initial Time" />
                        <PropertyColumn Property="x => x.FinalTime" Title="Final Time" />
                        <PropertyColumn Property="x => x.Building" />
                        <PropertyColumn Property="x => x.Department" />
                        <PropertyColumn Property="x => x.WorkCell" Title="Work Cell" />
                        <PropertyColumn Property="x => x.ShiftGroup" Title="Shift Group" />
                        <TemplateColumn StickyRight>
                            <CellTemplate>
                                <MudStack Row Spacing="1">
                                    <MudIconButton
                                        Size="@Size.Small"
                                        Icon="@Icons.Material.Rounded.RemoveRedEye"
                                        OnClick="() => ViewEmployeeTurnstileMovement(context.Item.PersonId, context.Item.Date)"
                                        title="View Employee Turnstile Movement"
                                    />
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="EmployeeTimeTracking" />
                    </PagerContent>
                </MudDataGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    // Variable declaration & initialization
    private bool isTableLoading = false;
    private EmployeeMovementFilter filter = new (){ Date = DateTime.Parse("2021-6-13") };
    private EmployeeMovementFilterSelection filterOptions = new ();
    private IEnumerable<EmployeeTimeTracking> presentEmployees = [];

    // Action on component initialization
    protected override async Task OnInitializedAsync()
    {
        try
        {
            filterOptions = await EmployeeMovementService.GetInitializedSelections();
        }
        catch (Exception)
        {
            Snackbar.Add("An error occurred while loading the page data. Please refresh the page or try again later.", Severity.Error);
        }

        // Load data depending on filter
        await LoadFilteredData();
    }

    // Load the filtered data
    private async Task LoadFilteredData()
    {
        isTableLoading = true;
        try
        {
            presentEmployees = await EmployeeTimeTrackingService.PresentEmployeeMovementList(filter);
        }
        catch (Exception)
        {
            Snackbar.Add("An error occurred while loading the list of present employee movement. Please refresh the page or try again later.", Severity.Error);
        }
        isTableLoading = false;
    }

    // Apply the filter to the list.
    private Task ApplyFilter() => LoadFilteredData();

    // Reset/clear the list filter
    private Task ResetFilter()
    {
        filter = new EmployeeMovementFilter { Date = DateTime.Parse("2021-6-13") };
        return LoadFilteredData();
    }

    // View the employee turnstile movement details
    private void ViewEmployeeTurnstileMovement(string personId, DateOnly date)
    {
        var fullUrl = QueryHelpers.AddQueryString($"/employeeTurnstileMovement/{personId}",new Dictionary<string, string?>
            {
                ["Date"] = date.ToString("yyyy-MM-dd")
            });
        Navigation.NavigateTo(fullUrl, true);
    }
}